# Copyright 2014 The html5ever Project Developers. See the
# COPYRIGHT file at the top-level directory of this distribution.
#
# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
# option. This file may not be copied, modified, or distributed
# except according to those terms.

VPATH := %VPATH%

RUSTC ?= rustc
RUST_DIRS := -L . -L $(VPATH)/rust-phf/build

RUSTC_CMD := $(RUSTC) -D warnings $(RUST_DIRS) $(RUSTFLAGS)

# Hack to make sure the build fails if rustc --print-file-name does
crate_name = $$(shell $$(RUSTC) --print-file-name $(1) || echo rustc_crate_name_failed)

PHF_DUMMY := rust-phf.dummy
PHF_ALL_SRC := $(shell find $(VPATH)/rust-phf -type f -name '*.rs')

LIB_TOP_SRC := $(VPATH)/src/lib.rs
LIB_ALL_SRC := $(shell find $(VPATH)/src -type f -name '*.rs')
$(eval LIB := $(call crate_name,$(LIB_TOP_SRC)))

MACROS_TOP_SRC := $(VPATH)/macros/lib.rs
MACROS_ALL_SRC := $(shell find $(VPATH)/macros -type f -name '*.rs')
$(eval MACROS := $(call crate_name,$(MACROS_TOP_SRC)))

EXT_TEST_TOP_SRC := $(VPATH)/test/bin.rs
EXT_TEST_ALL_SRC := $(shell find $(VPATH)/test -type f -name '*.rs')

EXT_BENCH_TOP_SRC := $(VPATH)/bench/bin.rs
EXT_BENCH_ALL_SRC := $(shell find $(VPATH)/bench -type f -name '*.rs')

LIB_DEPS := $(PHF_DUMMY) $(MACROS) $(LIB_ALL_SRC)

EXAMPLES := tokenize tokenize-bench print-tree-actions print-rcdom

.PHONY: all
all: $(LIB) $(EXAMPLES) docs

.PHONY: submodules
submodules:
	(cd $(VPATH) && git submodule update --init)

$(VPATH)/rust-phf/Makefile.in: submodules

$(VPATH)/rust-phf/Makefile: $(VPATH)/rust-phf/Makefile.in
	(cd $(VPATH)/rust-phf && ./configure)

$(PHF_DUMMY): $(VPATH)/rust-phf/Makefile $(PHF_ALL_SRC)
	make -C $(VPATH)/rust-phf
	touch $(PHF_DUMMY)

$(MACROS): $(MACROS_ALL_SRC) $(PHF_DUMMY)
	$(RUSTC_CMD) $(MACROS_TOP_SRC)

$(LIB): $(LIB_DEPS)
	$(RUSTC_CMD) $(LIB_TOP_SRC)

define DEF_EXAMPLE
$(1): $$(VPATH)/examples/$(1).rs $$(LIB)
	$$(RUSTC_CMD) $$<
endef

$(foreach example,$(EXAMPLES),\
$(eval $(call DEF_EXAMPLE,$(example))))

# Run #[test] functions
html5-test: $(LIB_DEPS)
	$(RUSTC_CMD) -o $@ --test $(LIB_TOP_SRC)

# Run external tests loaded from JSON
html5-external-test: $(EXT_TEST_ALL_SRC) $(LIB)
	$(RUSTC_CMD) $(EXT_TEST_TOP_SRC)

# Run benchmarks
html5-external-bench: $(EXT_BENCH_ALL_SRC) $(LIB)
	$(RUSTC_CMD) $(EXT_BENCH_TOP_SRC)

.PHONY: check
check: check-build check-internal check-external

.PHONY: check-build
check-build: all html5-test html5-external-test html5-external-bench

.PHONY: check-internal
check-internal: html5-test
	./html5-test

.PHONY: check-external
check-external: html5-external-test
	HTML5_SRC_DIR=$(VPATH) ./html5-external-test

METRICS ?= metrics.json

.PHONY: bench
bench: html5-external-bench
	./html5-external-bench --bench --save-metrics $(METRICS)

.PHONY: clean
clean:
	rm -f *.o *.a *.so *.dylib *.dll *.dummy *-test *-bench $(EXAMPLES)
	(cd $(VPATH)/rust-phf && make clean)

.PHONY: docs
docs: doc doc/html5-macros/index.html doc/html5/index.html

doc:
	mkdir doc

doc/html5-macros/index.html: $(MACROS_TOP_SRC)
	rustdoc $(RUST_DIRS) $(VPATH)/macros/lib.rs

doc/html5/index.html: $(LIB_DEPS)
	rustdoc $(RUST_DIRS) $(VPATH)/src/lib.rs
